# -*- coding: utf-8 -*-
"""HAB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11QPIq7ksQkU5Pq3JTT4rchI_wi6AAlQS
"""

import pandas as pd

# Load the data into a pandas DataFrame
data = pd.read_csv('data.csv')

# Get a summary of the dataset
print(data.describe())

# Display the first few rows of the dataset
print(data.head())

# Calculate the correlation between two columns, e.g., 'Water Temperature' and 'pH'
correlation = data['Water Temperature'].corr(data['pH'])
print(f'Correlation between Water Temperature and pH: {correlation}')

import matplotlib.pyplot as plt

# Plot a histogram of 'Water Temperature'
plt.hist(data['Water Temperature'], bins=20, color='skyblue')
plt.xlabel('Water Temperature')
plt.ylabel('Frequency')
plt.title('Histogram of Water Temperature')
plt.show()

# Convert the 'Datestamp' column to a datetime object
data['Datestamp'] = pd.to_datetime(data['Datestamp'])

# Set the 'Datestamp' column as the index for time series analysis
data.set_index('Datestamp', inplace=True)

# Plot a time series of 'Water Temperature'
plt.plot(data['Water Temperature'], marker='o', linestyle='-')
plt.xlabel('Date')
plt.ylabel('Water Temperature')
plt.title('Time Series of Water Temperature')
plt.show()

# Box plot of 'Water Temperature' by 'Site Name'
plt.figure(figsize=(10, 6))
data.boxplot(column='Water Temperature', by='Site Name', rot=90)
plt.xlabel('Site Name')
plt.ylabel('Water Temperature')
plt.title('Box Plot of Water Temperature by Site Name')
plt.show()

# Calculate the mean Water Temperature by Site Name
avg_temp_by_site = data.groupby('Site Name')['Water Temperature'].mean()
print(avg_temp_by_site)

# Scatter plot of 'Water Temperature' vs. 'pH'
plt.scatter(data['Water Temperature'], data['pH'], alpha=0.5)
plt.xlabel('Water Temperature')
plt.ylabel('pH')
plt.title('Scatter Plot of Water Temperature vs. pH')
plt.show()

# Check for missing values in the dataset
missing_data = data.isnull().sum()
print(missing_data)

import pandas as pd

# Load your dataset
data = pd.read_csv('data.csv')

# Data Cleaning: Remove missing values
data.dropna(inplace=True)

# Data Transformation: Standardize numeric columns
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
data[['Dissolved Oxygen']] = scaler.fit_transform(data[['Dissolved Oxygen']])

# Feature Selection: Select relevant features
selected_features = data[['Depth', 'Barometer', 'Salinity']]

import matplotlib.pyplot as plt

# Descriptive statistics
print(data.describe())

# Data Visualization: Histogram
plt.hist(data['Dissolved Oxygen'])
plt.xlabel('Dissolved Oxygen')
plt.ylabel('Frequency')
plt.show()

# Correlation analysis
correlation_matrix = data.corr()

from scipy.stats import ttest_ind

# Independent t-test
group1 = data[data['Depth'] == 'A']['Phycocyanin']
group2 = data[data['Dissolved Oxygen'] == 'B']['Microcystins']
t_statistic, p_value = ttest_ind(group1, group2)

from sklearn.decomposition import PCA

# Apply PCA for dimensionality reduction
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(selected_features)

# Visualize reduced data
plt.scatter(reduced_data[:, 0], reduced_data[:, 1])
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.show()

import matplotlib.pyplot as plt

# Plot HABs over time
plt.figure(figsize=(12, 6))
plt.plot(data['Datestamp'], data['Chlorophyll'], marker='o', linestyle='-')
plt.xlabel('Date')
plt.ylabel('Chlorophyll')
plt.title('Chlorophyll Over Time')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

import pandas as pd

# Extract month from the date
data['Month'] = pd.to_datetime(data['Date']).dt.month

# Calculate average HABs concentration per month
monthly_avg = data.groupby('Month')['HABs_Concentration'].mean()

# Plot monthly averages
plt.figure(figsize=(10, 5))
plt.bar(monthly_avg.index, monthly_avg.values)
plt.xlabel('Month')
plt.ylabel('Average HABs Concentration')
plt.title('Seasonal Variation of HABs')
plt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt

# Load a shapefile of your study area
study_area = gpd.read_file('study_area.shp')

# Merge HABs data with study area shapefile based on location
hab_gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.Longitude, data.Latitude))
hab_gdf.crs = study_area.crs  # Set the same coordinate reference system

# Plot HABs on the map
fig, ax = plt.subplots(figsize=(10, 10))
study_area.plot(ax=ax, color='lightgray', edgecolor='black')
hab_gdf.plot(ax=ax, markersize=5, color='red', label='HABs')
plt.title('HABs Distribution in Study Area')
plt.legend()
plt.show()

from scipy.stats import ttest_ind

# Independent t-test to compare HABs concentrations between two groups (e.g., pre-HABs and during-HABs)
pre_habs_data = data[data['Group'] == 'Pre-HABs']['HABs_Concentration']
during_habs_data = data[data['Group'] == 'During-HABs']['HABs_Concentration']

t_statistic, p_value = ttest_ind(pre_habs_data, during_habs_data)